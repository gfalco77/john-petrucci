package com.phoenix.inventory.services;import com.phoenix.inventory.domain.Inventory;import com.phoenix.inventory.domain.InventoryLocation;import com.phoenix.inventory.repositories.InventoryRepository;import com.phoenix.inventory.repositories.LocationRepository;import com.phoenix.inventory.requests.InventoryRequest;import com.phoenix.inventory.requests.InventoryResponse;import com.phoenix.inventory.requests.LocationResponse;import lombok.AllArgsConstructor;import org.apache.logging.log4j.util.Strings;import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;import org.springframework.data.relational.core.query.Criteria;import org.springframework.data.relational.core.query.Query;import org.springframework.data.relational.core.query.Update;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import reactor.core.publisher.Mono;@Service@AllArgsConstructorpublic class InventoryServiceImpl implements InventoryService {    private final InventoryRepository inventoryRepository;    private final LocationRepository locationRepository;    private final R2dbcEntityTemplate r2dbcEntityTemplate;    @Override    public Mono<InventoryResponse> getInventory(String productId) {        return inventoryRepository.findByInventoryLocationsBySku(productId)                .collectList()                .map(locationResponses -> {                    var inventoryResponse = new InventoryResponse();                    inventoryResponse.setProductId(productId);                    var totalQuantity = locationResponses.stream().mapToLong(LocationResponse::getQuantity).sum();                    inventoryResponse.setTotalQuantity(totalQuantity);                    inventoryResponse.setLocationResponses(locationResponses);                    return inventoryResponse;                });    }    @Override    public Mono<Long> getTotalInventoryLevel(String productId, String locationName) {        var locationNameInput = Strings.isEmpty(locationName) ? "default" : locationName;        return inventoryRepository.findQuantityBySkuAndLocationName(productId, locationNameInput);    }    @Override    public Mono<InventoryLocation> getInventory(String productId, String locationName) {        return inventoryRepository.findInventoryBySkuAndLocationName(productId, locationName);    }    @Override    @Transactional    public Mono<InventoryLocation> createInventoryLevel(InventoryRequest inventoryRequest) {        var inventory = new Inventory();        inventory.setSku(inventoryRequest.getProductId());        // Retrieve the default location and save the Inventory entity        return locationRepository.findByName(inventoryRequest.getLocationName())                .flatMap(location -> inventoryRepository.save(inventory)                        .flatMap(savedInventory -> {                            // Create the InventoryLocation entity with the saved Inventory ID                            var inventoryLocation = InventoryLocation.builder()                                    .inventoryId(savedInventory.getId())                                    .quantity(inventoryRequest.getQuantity())                                    .locationId(location.getId())                                    .build();                            // Save the InventoryLocation entity                            return r2dbcEntityTemplate.insert(inventoryLocation);                        }));    }    @Override    @Transactional    public Mono<Long> updateInventoryLevel(InventoryLocation inventoryLocation, Long quantity) {        return r2dbcEntityTemplate.update(InventoryLocation.class)                .inTable("inventory_location") //可以指定 table                .matching(Query.query(Criteria.where("inventory_id").is(inventoryLocation.getInventoryId())                        .and(Criteria.where("location_id").is(inventoryLocation.getLocationId()))))                .apply(Update.update("quantity", quantity));    }}