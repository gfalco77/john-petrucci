package com.phoenix.inventory.apis;import com.phoenix.inventory.domain.InventoryLocation;import com.phoenix.inventory.requests.InventoryRequest;import com.phoenix.inventory.requests.InventoryResponse;import com.phoenix.inventory.requests.UpdateInventoryRequest;import com.phoenix.inventory.services.InventoryService;import lombok.AllArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.server.ResponseStatusException;import reactor.core.publisher.Mono;/** * Get Inventory for product for all locations * Get Inventory for product in a location * Create an Inventory for a product in a location * Update the Inventory for a product in a location */@RestController@AllArgsConstructorpublic class InventoryController {    private final InventoryService inventoryService;    @GetMapping("/inventory/{productId}")    public Mono<InventoryResponse> getInventoryForProduct(@PathVariable String productId) {        return inventoryService.getInventory(productId);    }    @GetMapping("/inventory/{productId}/{locationName}")    public Mono<Long> getTotalInventoryForProduct(@PathVariable String productId, @PathVariable String locationName) {        return inventoryService.getTotalInventoryLevel(productId, locationName);    }    @PostMapping("/inventory")    public Mono<ResponseEntity<InventoryLocation>> createInventoryForProduct(@RequestBody InventoryRequest inventoryRequest) {        return inventoryService.createInventoryLevel(inventoryRequest).map(ResponseEntity::ok);    }    @PutMapping("/inventory/{productId}")    public Mono<ResponseEntity<Long>> updateInventoryForProduct(@PathVariable String productId, @RequestBody UpdateInventoryRequest updateInventoryRequest) {        return inventoryService.getInventory(productId, updateInventoryRequest.getLocationName())                .switchIfEmpty(Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND, "Inventory not found for Product" + productId)))                .flatMap(inventoryLocation -> inventoryService.updateInventoryLevel(inventoryLocation, updateInventoryRequest.getQuantity()))                .map(ResponseEntity::ok);    }}