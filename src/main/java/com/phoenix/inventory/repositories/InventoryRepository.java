package com.phoenix.inventory.repositories;import com.phoenix.inventory.domain.Inventory;import com.phoenix.inventory.domain.InventoryLocation;import com.phoenix.inventory.requests.LocationResponse;import org.springframework.data.r2dbc.repository.Query;import org.springframework.data.repository.reactive.ReactiveCrudRepository;import org.springframework.stereotype.Repository;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;@Repositorypublic interface InventoryRepository extends ReactiveCrudRepository<Inventory, String> {    @Query("SELECT il.quantity FROM inventory_location il " +        "JOIN inventory i ON il.inventory_id = i.id " +        "JOIN location l ON il.location_id = l.id " +        "WHERE i.sku = :sku AND l.name = :name")    Mono<Long> findQuantityBySkuAndLocationName(String sku, String name);    @Query("SELECT l.name, il.quantity, l.type FROM inventory i " +        "LEFT JOIN inventory_location il ON i.id = il.inventory_id " +        "JOIN location l ON il.location_id = l.id " +        "WHERE i.sku = :sku")    Flux<LocationResponse> findByInventoryLocationsBySku(String sku);    @Query("SELECT il.* FROM inventory_location il " +            "JOIN inventory i ON il.inventory_id = i.id " +            "JOIN location l ON il.location_id = l.id " +            "WHERE i.sku = :sku AND l.name = :name")    Mono<InventoryLocation> findInventoryBySkuAndLocationName(String sku, String name);}