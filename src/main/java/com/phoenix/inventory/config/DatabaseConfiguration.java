package com.phoenix.inventory.config;import io.r2dbc.pool.ConnectionPool;import io.r2dbc.pool.ConnectionPoolConfiguration;import io.r2dbc.postgresql.PostgresqlConnectionConfiguration;import io.r2dbc.postgresql.PostgresqlConnectionFactory;import io.r2dbc.spi.ConnectionFactory;import java.time.Duration;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;import org.springframework.r2dbc.connection.R2dbcTransactionManager;import org.springframework.transaction.ReactiveTransactionManager;import org.springframework.transaction.reactive.TransactionalOperator;@Configuration@EnableR2dbcRepositoriespublic class DatabaseConfiguration extends AbstractR2dbcConfiguration {    @Value("${spring.r2dbc.host}")    private String host;    @Value("${spring.r2dbc.port}")    private Integer port;    @Value("${spring.r2dbc.database}")    private String database;    @Value("${spring.r2dbc.username}")    private String username;    @Value("${spring.r2dbc.password}")    private String password;    @Value("${spring.r2dbc.pool.initial-size}")    private int initialSize;    @Value("${spring.r2dbc.pool.max-size}")    private int maxSize;    @Value("${spring.r2dbc.pool.max-idle-time}")    private int maxIdleTime;    @Override    @Bean    public ConnectionFactory connectionFactory() {        ConnectionFactory connectionFactory = new PostgresqlConnectionFactory(            PostgresqlConnectionConfiguration.builder()                .host(host)                .port(port)                .database(database)                .username(username)                .password(password)                .build()        );        ConnectionPoolConfiguration configuration = ConnectionPoolConfiguration.builder(connectionFactory)            .maxIdleTime(Duration.ofMinutes(maxIdleTime))            .initialSize(initialSize)            .maxSize(maxSize)            .maxCreateConnectionTime(Duration.ofSeconds(1))            .build();        return new ConnectionPool(configuration);    }    @Bean    public ReactiveTransactionManager reactiveTransactionManager(ConnectionFactory connectionFactory) {        return new R2dbcTransactionManager(connectionFactory);    }    @Bean    public TransactionalOperator transactionalOperator(ReactiveTransactionManager reactiveTransactionManager) {        return TransactionalOperator.create(reactiveTransactionManager);    }}